namespace phasereditor2d.roundedRectangleGraphics.image {

    import sceneobjects = scene.ui.sceneobjects;

    export class RoundedRectangleImageExtension extends scene.ui.sceneobjects.BaseImageExtension {

        private static _instance: RoundedRectangleImageExtension;
        private _help: string;

        static getInstance() {

            return this._instance ? this._instance : (this._instance = new RoundedRectangleImageExtension());
        }

        constructor() {
            super({
                phaserTypeName: "RoundedRectangleImage",
                typeName: "RoundedRectangleImage",
                category: scene.SCENE_OBJECT_SHAPE_CATEGORY,
                icon: scene.ScenePlugin.getInstance().getIconDescriptor(scene.ICON_BUILD)
            });

            this._help = [
                "**RoundedRectangleImage**\n",
                "A RoundedRectangleImage Game Object.",
                "It extends the `Phaser.GameObjects.Image` class. It draws a rounded rectangle on an offline graphics object, and set it as texture.",
                "You can change properties like the radius, shadow, background and stroke styles.",
                "The texture generated by this game object is shared with other objects with the same properties. This means, you can use this game object if you have multiple rounded rectangles but with the same properties."].join("\n\n");
        }

        getHelp(): string {

            return this._help;
        }

        getBlockCellRenderer() {

            return new RoundedRectangleBlockCellRenderer(
                scene.ScenePlugin.getInstance().getIcon(scene.ICON_IMAGE_TYPE));
        }

        acceptsDropData(data: any): boolean {

            return false;
        }

        createSceneObjectWithAsset(args: scene.ui.sceneobjects.ICreateWithAssetArgs): scene.ui.sceneobjects.ISceneGameObject {

            // not supported

            return null;
        }

        async getAssetsFromObjectData(args: scene.ui.sceneobjects.IGetAssetsFromObjectArgs): Promise<any[]> {

            return [];
        }

        getCodeDOMBuilder(): scene.ui.sceneobjects.GameObjectCodeDOMBuilder {

            return new RoundedRectangleCodeDOMBuilder("roundedRectangleImage");
        }

        protected newObject(scene: scene.ui.Scene, x: number, y: number, key?: string, frame?: string | number): sceneobjects.ISceneGameObject {

            return new RoundedRectangleImage(scene, x, y, 200, 200);
        }
    }
}